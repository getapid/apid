name: Build
on:
  push:
    branches:
      - master
jobs:
  build-cli:
    name: Build cli
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code
      uses: actions/checkout@v1

    - name: Get Go dependencies
      run: |
        make go-install

    - name: Build CLI executables
      run: |
        export VERSION=$(cat version)
        cd go
        GOOS=darwin GOARCH=amd64  go build -v -o build/cli-${VERSION}-darwin-amd64      svc/cli/main.go
        GOOS=linux GOARCH=amd64   go build -v -o build/cli-${VERSION}-linux-amd64       svc/cli/main.go
        GOOS=linux GOARCH=386     go build -v -o build/cli-${VERSION}-linux-386         svc/cli/main.go
        GOOS=linux GOARCH=arm     go build -v -o build/cli-${VERSION}-linux-arm         svc/cli/main.go
        GOOS=freebsd GOARCH=amd64 go build -v -o build/cli-${VERSION}-freebsd-amd64     svc/cli/main.go
        GOOS=freebsd GOARCH=386   go build -v -o build/cli-${VERSION}-freebsd-386       svc/cli/main.go
        GOOS=freebsd GOARCH=arm   go build -v -o build/cli-${VERSION}-freebsd-arm       svc/cli/main.go
        GOOS=openbsd GOARCH=amd64 go build -v -o build/cli-${VERSION}-openbsd-amd64     svc/cli/main.go
        GOOS=openbsd GOARCH=386   go build -v -o build/cli-${VERSION}-openbsd-386       svc/cli/main.go
        GOOS=solaris GOARCH=amd64 go build -v -o build/cli-${VERSION}-solaris-amd64     svc/cli/main.go
        GOOS=windows GOARCH=amd64 go build -v -o build/cli-${VERSION}-windows-amd64.exe svc/cli/main.go
        GOOS=windows GOARCH=386   go build -v -o build/cli-${VERSION}-windows-386.exe   svc/cli/main.go

    - name: Build docker cli images
      run: |
        export VERSION=$(cat version)
        cd go
        docker build -t getapid/apid:${VERSION} -f svc/cli/dockerfile .
        docker tag getapid/apid:${VERSION} getapid/apid:latest

    - name: Set up zola 0.8.0
      run: |
        wget -q -O - "https://github.com/getzola/zola/releases/download/v0.8.0/zola-v0.8.0-x86_64-unknown-linux-gnu.tar.gz" | sudo tar xzf - -C /usr/local/bin


    - name: Set up node
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - name: Build static site
      env:
        CLICOLOR: 0
      run: |
        cd site
        npm i
        zola build

    - name: Set up s3cmd 2.0.1
      run: |
        sudo apt install s3cmd

    - name: Publish CLI
      env:
        ACCESS_KEY: "NXGZW6TX5E55CFJ574AR"
        SECRET_KEY: ${{ secrets.DIGITAL_OCEAN_SPACE_SECRET_KEY }}
        HOST_NAME: "fra1.digitaloceanspaces.com"
        HOST_BUCKET: "%(bucket)s.fra1.digitaloceanspaces.com"
      run: |
        export VERSION=$(cat version)
        cd go/build
        s3cmd put * s3://apid-production-space/cli/${VERSION}/ \
        --acl-public \
        --add-header=Cache-Control:max-age=86400 \
        --recursive \
        --access_key=${ACCESS_KEY} \
        --secret_key=${SECRET_KEY} \
        --host=${HOST_NAME} \
        --host-bucket=${HOST_BUCKET}

    - name: Publish static site
      env:
        SITE_NAME: unruffled-franklin-e163c9
        NETLIFY_PERSONAL_TOKEN: ${{ secrets.NETLIFY_PERSONAL_TOKEN }}
      run: |
        cd site
        zip -r site.zip public
        curl -H "Content-Type: application/zip" \
          -H "Authorization: Bearer ${NETLIFY_PERSONAL_TOKEN}" \
          --data-binary "@site.zip" \
          https://api.netlify.com/api/v1/sites/${SITE_NAME}.netlify.com/deploys

    - name: Publish docker cli images
      env:
        DOCKER_HUB_USERNAME: getapid
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        export VERSION=$(cat version)
        echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
        docker push getapid/apid:${VERSION}
        docker push getapid/apid:latest